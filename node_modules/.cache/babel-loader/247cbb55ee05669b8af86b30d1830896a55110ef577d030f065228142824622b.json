{"ast":null,"code":"import { ActionTypes } from \"../../redux/constants/ActionTypes\";\nimport TaskData from '../../database/TaskData';\nconst TASKS = TaskData;\nconst TaskReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TASKS;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(\"TaskReducer\", state, TASKS);\n  switch (action.type) {\n    // Create a new task using the text from the action\n    case ActionTypes.ADD_TASK:\n      return [...state, {\n        id: action.id,\n        text: action.text,\n        completed: false\n      }];\n\n    // Remove the task with the matching id\n    case ActionTypes.REMOVE_TASK:\n      return state.filter(task => task.id !== action.id);\n\n    // Toggle completed state of the task with matching id\n    case ActionTypes.TOGGLE_TASK:\n      return state.map(task => {\n        if (task.id === action.id) {\n          return {\n            ...task,\n            completed: !task.completed\n          };\n        }\n        return task;\n      });\n    default:\n      return state;\n  }\n};\n_c = TaskReducer;\nexport default TaskReducer;\nvar _c;\n$RefreshReg$(_c, \"TaskReducer\");","map":{"version":3,"names":["ActionTypes","TaskData","TASKS","TaskReducer","state","action","console","log","type","ADD_TASK","id","text","completed","REMOVE_TASK","filter","task","TOGGLE_TASK","map"],"sources":["D:/Practice/React-Local/Dhara-Task-Management-React/task-management-app/src/redux/reducer/TaskReducer.js"],"sourcesContent":["import {ActionTypes} from \"../../redux/constants/ActionTypes\"\r\nimport TaskData from '../../database/TaskData'\r\n\r\n\r\n  const TASKS = TaskData;\r\n  const TaskReducer = (state = TASKS, action) => {\r\n    console.log(\"TaskReducer\",state,TASKS);\r\n    switch (action.type) {\r\n      // Create a new task using the text from the action\r\n      case ActionTypes.ADD_TASK:\r\n        return [\r\n          ...state,\r\n          {\r\n            id: action.id,\r\n            text: action.text,\r\n            completed: false,\r\n          },\r\n        ];\r\n  \r\n      // Remove the task with the matching id\r\n      case ActionTypes.REMOVE_TASK:\r\n        return state.filter(task => task.id !== action.id);\r\n  \r\n      // Toggle completed state of the task with matching id\r\n      case ActionTypes.TOGGLE_TASK:\r\n        return state.map((task) => {\r\n          if (task.id === action.id) {\r\n            return {\r\n              ...task,\r\n              completed: !task.completed,\r\n            };\r\n          }\r\n          return task;\r\n        });\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  \r\n  export default TaskReducer;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,mCAAmC;AAC7D,OAAOC,QAAQ,MAAM,yBAAyB;AAG5C,MAAMC,KAAK,GAAGD,QAAQ;AACtB,MAAME,WAAW,GAAG,YAA2B;EAAA,IAA1BC,KAAK,uEAAGF,KAAK;EAAA,IAAEG,MAAM;EACxCC,OAAO,CAACC,GAAG,CAAC,aAAa,EAACH,KAAK,EAACF,KAAK,CAAC;EACtC,QAAQG,MAAM,CAACG,IAAI;IACjB;IACA,KAAKR,WAAW,CAACS,QAAQ;MACvB,OAAO,CACL,GAAGL,KAAK,EACR;QACEM,EAAE,EAAEL,MAAM,CAACK,EAAE;QACbC,IAAI,EAAEN,MAAM,CAACM,IAAI;QACjBC,SAAS,EAAE;MACb,CAAC,CACF;;IAEH;IACA,KAAKZ,WAAW,CAACa,WAAW;MAC1B,OAAOT,KAAK,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACL,EAAE,KAAKL,MAAM,CAACK,EAAE,CAAC;;IAEpD;IACA,KAAKV,WAAW,CAACgB,WAAW;MAC1B,OAAOZ,KAAK,CAACa,GAAG,CAAEF,IAAI,IAAK;QACzB,IAAIA,IAAI,CAACL,EAAE,KAAKL,MAAM,CAACK,EAAE,EAAE;UACzB,OAAO;YACL,GAAGK,IAAI;YACPH,SAAS,EAAE,CAACG,IAAI,CAACH;UACnB,CAAC;QACH;QACA,OAAOG,IAAI;MACb,CAAC,CAAC;IACJ;MACE,OAAOX,KAAK;EAAC;AAEnB,CAAC;AAAA,KAhCKD,WAAW;AAkCjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}