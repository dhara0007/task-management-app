{"ast":null,"code":"var _jsxFileName = \"D:\\\\Practice\\\\React-Local\\\\Dhara-Task-Management-React\\\\task-management-app\\\\src\\\\redux\\\\components\\\\AddTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { ListItem, TextField, IconButton } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport { AddTaskAction } from '../actions/AddTaskAction';\nimport { ICON_SIZE } from '../../App';\n\n/**\r\n * Creates new task\r\n * \r\n * @param {Function} addTak Dispatches an action that creates a new task\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddTask = _ref => {\n  _s();\n  let {\n    AddTaskAction\n  } = _ref;\n  const [inputTextName, setInputTextName] = useState('');\n  const [inputTextDescription, setInputTextDescription] = useState('');\n  const inputElement = useRef();\n  const onSubmit = e => {\n    console.log(\"On Submit\", e, inputTextName, inputTextDescription);\n    e.preventDefault();\n\n    // Dispatch action that adds new task\n    AddTaskAction(inputTextDescription, inputTextName);\n\n    // Reset input field and focus it\n    setInputTextName('');\n    setInputTextDescription('');\n    inputElement.current.focus();\n  };\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    component: \"form\",\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      edge: \"start\",\n      \"aria-label\": \"create new task\",\n      type: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {\n        color: \"primary\",\n        fontSize: ICON_SIZE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      ref: inputElement,\n      value: inputTextName,\n      onChange: e => setInputTextName(e.target.value),\n      id: \"outlined-basic\",\n      label: \"Task Name\",\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      ref: inputElement,\n      value: inputTextDescription,\n      onChange: e => setInputTextDescription(e.target.value),\n      id: \"outlined-basic\",\n      label: \"Task Description\",\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(AddTask, \"kVA87pwqmpJtQSuON/fZA4v0c+c=\");\n_c = AddTask;\nconst mapDispatchToProps = dispatch => {\n  return {\n    AddTaskAction: text => dispatch(AddTaskAction(text))\n  };\n};\nexport default connect(null, mapDispatchToProps)(AddTask);\nvar _c;\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"names":["React","useState","useRef","connect","ListItem","TextField","IconButton","AddCircleIcon","AddTaskAction","ICON_SIZE","AddTask","inputTextName","setInputTextName","inputTextDescription","setInputTextDescription","inputElement","onSubmit","e","console","log","preventDefault","current","focus","target","value","mapDispatchToProps","dispatch","text"],"sources":["D:/Practice/React-Local/Dhara-Task-Management-React/task-management-app/src/redux/components/AddTask.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ListItem, TextField, IconButton } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { AddTaskAction } from '../actions/AddTaskAction';\r\nimport { ICON_SIZE } from '../../App';\r\n\r\n/**\r\n * Creates new task\r\n * \r\n * @param {Function} addTak Dispatches an action that creates a new task\r\n */\r\nconst AddTask = ({ AddTaskAction }) => {\r\n  const [inputTextName, setInputTextName] = useState('');\r\n  const [inputTextDescription, setInputTextDescription] = useState('');\r\n\r\n  const inputElement = useRef();\r\n\r\n  const onSubmit = (e) => {\r\n    console.log(\"On Submit\",e,inputTextName,inputTextDescription);\r\n    e.preventDefault();\r\n\r\n    // Dispatch action that adds new task\r\n    AddTaskAction(inputTextDescription,inputTextName);\r\n\r\n    // Reset input field and focus it\r\n    setInputTextName('');\r\n    setInputTextDescription('');\r\n    inputElement.current.focus();\r\n  }\r\n\r\n  return (\r\n    <ListItem \r\n      component=\"form\"\r\n      onSubmit={onSubmit}\r\n    >\r\n      <IconButton \r\n        edge=\"start\" \r\n        aria-label=\"create new task\"\r\n        type=\"submit\"\r\n      >\r\n        <AddCircleIcon color=\"primary\" fontSize={ICON_SIZE} />\r\n      </IconButton>\r\n      <TextField\r\n        ref={inputElement}\r\n        value={inputTextName}\r\n        onChange={e => setInputTextName(e.target.value)}\r\n        id=\"outlined-basic\"\r\n        label=\"Task Name\"\r\n        variant=\"outlined\"\r\n        required\r\n        fullWidth\r\n      />\r\n      <TextField\r\n        ref={inputElement}\r\n        value={inputTextDescription}\r\n        onChange={e => setInputTextDescription(e.target.value)}\r\n        id=\"outlined-basic\"\r\n        label=\"Task Description\"\r\n        variant=\"outlined\"\r\n        required\r\n        fullWidth\r\n      />\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    AddTaskAction: (text) => dispatch(AddTaskAction(text))\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AddTask);\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,mBAAmB;AACnE,OAAOC,aAAa,MAAM,8BAA8B;AACxD,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,SAAS,QAAQ,WAAW;;AAErC;AACA;AACA;AACA;AACA;AAJA;AAKA,MAAMC,OAAO,GAAG,QAAuB;EAAA;EAAA,IAAtB;IAAEF;EAAc,CAAC;EAChC,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpE,MAAMc,YAAY,GAAGb,MAAM,EAAE;EAE7B,MAAMc,QAAQ,GAAIC,CAAC,IAAK;IACtBC,OAAO,CAACC,GAAG,CAAC,WAAW,EAACF,CAAC,EAACN,aAAa,EAACE,oBAAoB,CAAC;IAC7DI,CAAC,CAACG,cAAc,EAAE;;IAElB;IACAZ,aAAa,CAACK,oBAAoB,EAACF,aAAa,CAAC;;IAEjD;IACAC,gBAAgB,CAAC,EAAE,CAAC;IACpBE,uBAAuB,CAAC,EAAE,CAAC;IAC3BC,YAAY,CAACM,OAAO,CAACC,KAAK,EAAE;EAC9B,CAAC;EAED,oBACE,QAAC,QAAQ;IACP,SAAS,EAAC,MAAM;IAChB,QAAQ,EAAEN,QAAS;IAAA,wBAEnB,QAAC,UAAU;MACT,IAAI,EAAC,OAAO;MACZ,cAAW,iBAAiB;MAC5B,IAAI,EAAC,QAAQ;MAAA,uBAEb,QAAC,aAAa;QAAC,KAAK,EAAC,SAAS;QAAC,QAAQ,EAAEP;MAAU;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QAC3C,eACb,QAAC,SAAS;MACR,GAAG,EAAEM,YAAa;MAClB,KAAK,EAAEJ,aAAc;MACrB,QAAQ,EAAEM,CAAC,IAAIL,gBAAgB,CAACK,CAAC,CAACM,MAAM,CAACC,KAAK,CAAE;MAChD,EAAE,EAAC,gBAAgB;MACnB,KAAK,EAAC,WAAW;MACjB,OAAO,EAAC,UAAU;MAClB,QAAQ;MACR,SAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACT,eACF,QAAC,SAAS;MACR,GAAG,EAAET,YAAa;MAClB,KAAK,EAAEF,oBAAqB;MAC5B,QAAQ,EAAEI,CAAC,IAAIH,uBAAuB,CAACG,CAAC,CAACM,MAAM,CAACC,KAAK,CAAE;MACvD,EAAE,EAAC,gBAAgB;MACnB,KAAK,EAAC,kBAAkB;MACxB,OAAO,EAAC,UAAU;MAClB,QAAQ;MACR,SAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACT;EAAA;IAAA;IAAA;IAAA;EAAA,QACO;AAEf,CAAC;AAAA,GArDKd,OAAO;AAAA,KAAPA,OAAO;AAuDb,MAAMe,kBAAkB,GAAIC,QAAQ,IAAK;EACvC,OAAO;IACLlB,aAAa,EAAGmB,IAAI,IAAKD,QAAQ,CAAClB,aAAa,CAACmB,IAAI,CAAC;EACvD,CAAC;AACH,CAAC;AAED,eAAexB,OAAO,CAAC,IAAI,EAAEsB,kBAAkB,CAAC,CAACf,OAAO,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}