{"ast":null,"code":"var _jsxFileName = \"D:\\\\Practice\\\\React-Local\\\\Dhara-Task-Management-React\\\\task-management-app\\\\src\\\\redux\\\\components\\\\TaskList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport TaskItem from './TaskItem';\nimport { Container, Draggable } from \"react-smooth-dnd\";\n\n/**\r\n * Lists given array of tasks\r\n *\r\n * @param {Array} tasks An array with all the tasks to display\r\n * @param {Function} onTaskClick Toggles completed state (true/false)\r\n * @param {Function} onTaskDeleteClick Deletes the task\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst onDrop = _ref => {\n  let {\n    removedIndex,\n    addedIndex\n  } = _ref;\n  setItems(items => arrayMove(items, removedIndex, addedIndex));\n};\nconst TaskList = _ref2 => {\n  let {\n    tasks,\n    onTaskClick,\n    onTaskDeleteClick\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(List, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      dragHandleSelector: \".drag-handle\",\n      lockAxis: \"y\",\n      onDrop: onDrop,\n      children: tasks.map(task => {\n        return /*#__PURE__*/_jsxDEV(TaskItem, {\n          ...task,\n          onClick: () => onTaskClick(task.id),\n          onDeleteClick: () => onTaskDeleteClick(task.id)\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n};\n_c = TaskList;\nconsole.log(\"TaskList\");\nTaskList.propTypes = {\n  tasks: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    //completed: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    duedate: PropTypes.string.isRequired\n  }).isRequired).isRequired,\n  onTaskClick: PropTypes.func.isRequired,\n  onTaskDeleteClick: PropTypes.func.isRequired\n};\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","PropTypes","List","TaskItem","Container","Draggable","onDrop","removedIndex","addedIndex","setItems","items","arrayMove","TaskList","tasks","onTaskClick","onTaskDeleteClick","map","task","id","console","log","propTypes","arrayOf","shape","number","isRequired","name","string","description","duedate","func"],"sources":["D:/Practice/React-Local/Dhara-Task-Management-React/task-management-app/src/redux/components/TaskList.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport List from '@material-ui/core/List';\r\nimport TaskItem from './TaskItem';\r\nimport { Container, Draggable } from \"react-smooth-dnd\";\r\n\r\n\r\n/**\r\n * Lists given array of tasks\r\n *\r\n * @param {Array} tasks An array with all the tasks to display\r\n * @param {Function} onTaskClick Toggles completed state (true/false)\r\n * @param {Function} onTaskDeleteClick Deletes the task\r\n */\r\n const onDrop = ({ removedIndex, addedIndex }) => {\r\n  setItems(items => arrayMove(items, removedIndex, addedIndex));\r\n};\r\nconst TaskList = ({ tasks, onTaskClick, onTaskDeleteClick }) => \r\n(\r\n  <List>\r\n  <Container dragHandleSelector=\".drag-handle\" lockAxis=\"y\" onDrop={onDrop}>\r\n    {tasks.map((task) => {\r\n      return (\r\n        <TaskItem\r\n          key={task.id}\r\n          {...task}\r\n          onClick={() => onTaskClick(task.id)}\r\n          onDeleteClick={() => onTaskDeleteClick(task.id)}\r\n        />\r\n      );\r\n    })}\r\n    </Container>\r\n  </List>\r\n);\r\n\r\nconsole.log(\"TaskList\");\r\n\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      //completed: PropTypes.bool.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      description:PropTypes.string.isRequired,\r\n      duedate:PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ).isRequired,\r\n  onTaskClick: PropTypes.func.isRequired,\r\n  onTaskDeleteClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,SAAS,EAAEC,SAAS,QAAQ,kBAAkB;;AAGvD;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOC,MAAMC,MAAM,GAAG,QAAkC;EAAA,IAAjC;IAAEC,YAAY;IAAEC;EAAW,CAAC;EAC3CC,QAAQ,CAACC,KAAK,IAAIC,SAAS,CAACD,KAAK,EAAEH,YAAY,EAAEC,UAAU,CAAC,CAAC;AAC/D,CAAC;AACD,MAAMI,QAAQ,GAAG;EAAA,IAAC;IAAEC,KAAK;IAAEC,WAAW;IAAEC;EAAkB,CAAC;EAAA,oBAEzD,QAAC,IAAI;IAAA,uBACL,QAAC,SAAS;MAAC,kBAAkB,EAAC,cAAc;MAAC,QAAQ,EAAC,GAAG;MAAC,MAAM,EAAET,MAAO;MAAA,UACtEO,KAAK,CAACG,GAAG,CAAEC,IAAI,IAAK;QACnB,oBACE,QAAC,QAAQ;UAAA,GAEHA,IAAI;UACR,OAAO,EAAE,MAAMH,WAAW,CAACG,IAAI,CAACC,EAAE,CAAE;UACpC,aAAa,EAAE,MAAMH,iBAAiB,CAACE,IAAI,CAACC,EAAE;QAAE,GAH3CD,IAAI,CAACC,EAAE;UAAA;UAAA;UAAA;QAAA,QAIZ;MAEN,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA;EACU;IAAA;IAAA;IAAA;EAAA,QACP;AAAA,CACR;AAAC,KAhBIN,QAAQ;AAkBdO,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;AAEvBR,QAAQ,CAACS,SAAS,GAAG;EACnBR,KAAK,EAAEZ,SAAS,CAACqB,OAAO,CACtBrB,SAAS,CAACsB,KAAK,CAAC;IACdL,EAAE,EAAEjB,SAAS,CAACuB,MAAM,CAACC,UAAU;IAC/B;IACAC,IAAI,EAAEzB,SAAS,CAAC0B,MAAM,CAACF,UAAU;IACjCG,WAAW,EAAC3B,SAAS,CAAC0B,MAAM,CAACF,UAAU;IACvCI,OAAO,EAAC5B,SAAS,CAAC0B,MAAM,CAACF;EAC3B,CAAC,CAAC,CAACA,UAAU,CACd,CAACA,UAAU;EACZX,WAAW,EAAEb,SAAS,CAAC6B,IAAI,CAACL,UAAU;EACtCV,iBAAiB,EAAEd,SAAS,CAAC6B,IAAI,CAACL;AACpC,CAAC;AAED,eAAeb,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}