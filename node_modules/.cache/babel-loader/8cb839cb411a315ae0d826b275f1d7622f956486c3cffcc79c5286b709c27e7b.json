{"ast":null,"code":"var _jsxFileName = \"D:\\\\Practice\\\\React-Local\\\\Dhara-Task-Management-React\\\\task-management-app\\\\src\\\\redux\\\\components\\\\AddTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { ListItem, TextField, IconButton } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport { AddTaskAction } from '../actions/AddTaskAction';\nimport { ICON_SIZE } from '../../App';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\n\n/**\r\n * Creates new task\r\n * \r\n * @param {Function} addTak Dispatches an action that creates a new task\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddTask = _ref => {\n  _s();\n  let {\n    AddTaskAction\n  } = _ref;\n  const [inputTextName, setInputTextName] = useState('');\n  const [inputTextDescription, setInputTextDescription] = useState('');\n  const [inputTextDate, setInputTextDate] = React.useState(null);\n  const inputElement = useRef();\n  const onSubmit = e => {\n    console.log(\"On Submit\", e, inputTextName, inputTextDescription);\n    e.preventDefault();\n\n    // Dispatch action that adds new task\n    AddTaskAction(inputTextName, inputTextDescription);\n\n    // Reset input field and focus it\n    setInputTextName('');\n    setInputTextDescription('');\n    inputElement.current.focus();\n  };\n  return /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n    dateAdapter: AdapterDayjs,\n    children: /*#__PURE__*/_jsxDEV(ListItem, {\n      component: \"form\",\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        edge: \"start\",\n        \"aria-label\": \"create new task\",\n        type: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(AddCircleIcon, {\n          color: \"primary\",\n          fontSize: ICON_SIZE\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        ref: inputElement,\n        value: inputTextName,\n        onChange: e => setInputTextName(e.target.value),\n        id: \"outlined-basic\",\n        label: \"Task Name\",\n        variant: \"outlined\",\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        ref: inputElement,\n        value: inputTextDescription,\n        onChange: e => setInputTextDescription(e.target.value),\n        id: \"outlined-basic\",\n        label: \"Task Description\",\n        variant: \"outlined\",\n        required: true,\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        label: \"Basic example\",\n        value: inputTextDate,\n        onChange: newValue => {\n          setInputTextDate(newValue);\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n          ...params\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(AddTask, \"aNtIj/tVgtUy6ZDf7m06ksmH/iY=\");\n_c = AddTask;\nconst mapDispatchToProps = dispatch => {\n  return {\n    AddTaskAction: (name, description) => dispatch(AddTaskAction(name, description))\n  };\n};\nexport default connect(null, mapDispatchToProps)(AddTask);\nvar _c;\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"names":["React","useState","useRef","connect","ListItem","TextField","IconButton","AddCircleIcon","AddTaskAction","ICON_SIZE","DatePicker","AdapterDayjs","LocalizationProvider","AddTask","inputTextName","setInputTextName","inputTextDescription","setInputTextDescription","inputTextDate","setInputTextDate","inputElement","onSubmit","e","console","log","preventDefault","current","focus","target","value","newValue","params","mapDispatchToProps","dispatch","name","description"],"sources":["D:/Practice/React-Local/Dhara-Task-Management-React/task-management-app/src/redux/components/AddTask.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ListItem, TextField, IconButton } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { AddTaskAction } from '../actions/AddTaskAction';\r\nimport { ICON_SIZE } from '../../App';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\n\r\n\r\n/**\r\n * Creates new task\r\n * \r\n * @param {Function} addTak Dispatches an action that creates a new task\r\n */\r\nconst AddTask = ({ AddTaskAction }) => {\r\n  const [inputTextName, setInputTextName] = useState('');\r\n  const [inputTextDescription, setInputTextDescription] = useState('');\r\n  const [inputTextDate, setInputTextDate] = React.useState(null);\r\n\r\n  const inputElement = useRef();\r\n\r\n  const onSubmit = (e) => {\r\n    console.log(\"On Submit\",e,inputTextName,inputTextDescription);\r\n    e.preventDefault();\r\n\r\n    // Dispatch action that adds new task\r\n    AddTaskAction(inputTextName,inputTextDescription);\r\n\r\n    // Reset input field and focus it\r\n    setInputTextName('');\r\n    setInputTextDescription('');\r\n    inputElement.current.focus();\r\n  }\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n\r\n    <ListItem \r\n      component=\"form\"\r\n      onSubmit={onSubmit}\r\n    >\r\n      <IconButton \r\n        edge=\"start\" \r\n        aria-label=\"create new task\"\r\n        type=\"submit\"\r\n      >\r\n        <AddCircleIcon color=\"primary\" fontSize={ICON_SIZE} />\r\n      </IconButton>\r\n      <TextField\r\n        ref={inputElement}\r\n        value={inputTextName}\r\n        onChange={e => setInputTextName(e.target.value)}\r\n        id=\"outlined-basic\"\r\n        label=\"Task Name\"\r\n        variant=\"outlined\"\r\n        required\r\n        fullWidth\r\n      />\r\n      <TextField\r\n        ref={inputElement}\r\n        value={inputTextDescription}\r\n        onChange={e => setInputTextDescription(e.target.value)}\r\n        id=\"outlined-basic\"\r\n        label=\"Task Description\"\r\n        variant=\"outlined\"\r\n        required\r\n        fullWidth\r\n      />\r\n      \r\n   \r\n      <DatePicker\r\n        label=\"Basic example\"\r\n        value={inputTextDate}\r\n        onChange={(newValue) => {\r\n          setInputTextDate(newValue);\r\n        }}\r\n        renderInput={(params) => <TextField {...params} />}\r\n      />\r\n    </ListItem>\r\n    </LocalizationProvider>\r\n\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    \r\n    AddTaskAction: (name,description) => dispatch(AddTaskAction(name,description))\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AddTask);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}